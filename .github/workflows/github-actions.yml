# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI Build & Upload DockerHub

on:
  # msater 브랜치로 push가 되면 동작합니다.
#  push:
#    branches: [ "master" ]

  # msater 브랜치로 PR이 오면 동작합니다.
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: 저장소 Checkout
      uses: actions/checkout@v3


#    GitHub-Actions에서 사용될 JDK를 세팅합니다.
#    (프로젝트나 AWS의 Java 버전과는 달라도 무방합니다.)
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'


#    gradle caching
#    빌드 시간이 20~30% 단축
#    공식문서 참고 : https://github.com/actions/cache
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-


#    실행권한을 주지 않으면 에러가 뜹니다.
#    Run ./gradlew build
#    /home/runner/work/_temp/ec1db276-8c5b-4000-a69f-6ae292aee7e6.sh:
#      line 1:
#        ./gradlew: Permission denied
#    Error: Process completed with exit code 126.
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew


#      ./gradlew build 이 실행되면 build/libs 폴더에 jar 파일이 생깁니다.
#      관련 설정 : build.gradle 의 jar {...}, bootJar{...} 부분
    - name: Build with Gradle
      run: ./gradlew build


#      현재 디렉토리에 있는 Dockerfile 을 사용하여 도커 이미지를 빌드합니다.
#      이때 이미지 이름은 <docker_hub_username>/<image_name> 로 설정됩니다.
#      도커 허브에 이미지를 publish 하기 위해서는 앞에 유저이름을 꼭 붙여야 합니다.
    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/foodlnk-springboot .


#    docker/login-action 이라는 Action을 사용하여 도커 로그인을 진행합니다.
#    -u, -p 옵션을 사용하여 인라인 명령을 사용하면, GitHub Actions에서는
#    보안상의 이유로 오류가 발생하므로 해당 Action을 사용합니다.
    - name: Docker Hub 로그인
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}


#    Docker Hub 저장소에 이미지를 push 합니다.
    - name: Docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/foodlnk-springboot